{"ast":null,"code":"import Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      posts: [],\n      users: []\n    };\n  },\n  methods: {\n    updatePosts() {\n      axios.get(\"/api/1/posts\").then(response => {\n        this.posts = response.data;\n      });\n    },\n    updateUsers() {\n      axios.get(\"/api/1/users\").then(response => {\n        this.users = response.data;\n      });\n    }\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n    this.updatePosts();\n    this.updateUsers();\n  },\n  beforeCreate() {\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/jwt\", {\n        login,\n        password\n      }).then(response => {\n        this.$root.$emit(\"onEnterImpl\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onRegister\", (login, name, password) => {\n      if (login === \"\" || login === null) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login can't be empty\");\n        return;\n      }\n      if (name === null || name.trim() === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Name can't be empty\");\n        return;\n      }\n      if (password === \"\" || password === null) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Password can't be empty\");\n        return;\n      }\n      axios.post(\"/api/1/users\", {\n        login,\n        name,\n        password\n      }).then(response => {\n        this.updateUsers();\n        this.$root.$emit(\"onEnterImpl\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onEnterImpl\", data => {\n      localStorage.setItem(\"jwt\", data);\n      this.$root.$emit(\"onJwt\", data);\n    });\n    this.$root.$on(\"onJwt\", jwt => {\n      localStorage.setItem(\"jwt\", jwt);\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"));\n    });\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n    this.$root.$on(\"onWritePost\", (title, text) => {\n      if (this.user) {\n        if (!title || title.length < 4) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n          return;\n        }\n        if (!text || text.length < 4) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n          return;\n        }\n        let user = this.user;\n        axios.post(\"/api/1/posts\", {\n          title,\n          text,\n          user\n        }).then(() => {\n          this.updatePosts();\n          this.$root.$emit(\"onChangePage\", \"Index\");\n        }).catch(error => {\n          this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n        });\n      } else {\n        this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n      }\n    });\n  }\n};","map":{"version":3,"names":["Header","Middle","Footer","axios","name","components","data","user","posts","users","methods","updatePosts","get","then","response","updateUsers","beforeMount","localStorage","getItem","$root","$emit","beforeCreate","$on","login","password","post","catch","error","trim","setItem","jwt","params","removeItem","title","text","length"],"sources":["src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <Header :user=\"user\"/>\n        <Middle :posts=\"posts\" :users=\"users\"/>\n        <Footer/>\n    </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\"\n\nexport default {\n    name: 'App',\n    components: {\n        Footer,\n        Middle,\n        Header\n    },\n    data: function () {\n        return {\n            user: null,\n            posts: [],\n            users: []\n        }\n    },\n    methods: {\n        updatePosts() {\n            axios.get(\"/api/1/posts\").then(response => {\n              this.posts = response.data;\n            });\n        },\n        updateUsers() {\n            axios.get(\"/api/1/users\").then(response => {\n                this.users = response.data;\n            });\n        }\n    },\n    beforeMount() {\n        if (localStorage.getItem(\"jwt\") && !this.user) {\n            this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n        }\n\n        this.updatePosts();\n        this.updateUsers();\n    },\n    beforeCreate() {\n        this.$root.$on(\"onEnter\", (login, password) => {\n            if (password === \"\") {\n                this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n                return;\n            }\n\n            axios.post(\"/api/1/jwt\", {\n                    login, password\n            }).then(response => {\n                this.$root.$emit(\"onEnterImpl\", response.data);\n            }).catch(error => {\n                this.$root.$emit(\"onEnterValidationError\", error.response.data);\n            });\n        });\n\n        this.$root.$on(\"onRegister\", (login, name, password) => {\n            if (login === \"\" || login === null) {\n              this.$root.$emit(\"onRegisterValidationError\", \"Login can't be empty\");\n              return;\n            }\n\n            if (name === null || name.trim() === \"\") {\n              this.$root.$emit(\"onRegisterValidationError\", \"Name can't be empty\");\n              return;\n            }\n\n            if (password === \"\" || password === null) {\n                  this.$root.$emit(\"onRegisterValidationError\", \"Password can't be empty\");\n                  return;\n            }\n\n            axios.post(\"/api/1/users\", {\n              login, name, password\n            }).then(response => {\n                this.updateUsers();\n                this.$root.$emit(\"onEnterImpl\", response.data);\n            }).catch(error => {\n                this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n            });\n        });\n\n        this.$root.$on(\"onEnterImpl\", (data) => {\n            localStorage.setItem(\"jwt\", data);\n            this.$root.$emit(\"onJwt\", data);\n        });\n\n        this.$root.$on(\"onJwt\", (jwt) => {\n            localStorage.setItem(\"jwt\", jwt);\n\n            axios.get(\"/api/1/users/auth\", {\n                params: {\n                    jwt\n                }\n            }).then(response => {\n                this.user = response.data;\n                this.$root.$emit(\"onChangePage\", \"Index\");\n            }).catch(() => this.$root.$emit(\"onLogout\"));\n        });\n\n        this.$root.$on(\"onLogout\", () => {\n            localStorage.removeItem(\"jwt\");\n            this.user = null;\n        });\n\n        this.$root.$on(\"onWritePost\", (title, text) => {\n            if (this.user) {\n                if (!title || title.length < 4) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n                    return;\n                }\n                if (!text || text.length < 4) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n                    return;\n                }\n\n              let user = this.user;\n              axios.post(\"/api/1/posts\", {\n                    title, text, user\n                }).then(() => {\n                    this.updatePosts();\n                    this.$root.$emit(\"onChangePage\", \"Index\");\n                }).catch(error => {\n                    this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n                });\n            } else {\n                this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n            }\n        });\n    }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}